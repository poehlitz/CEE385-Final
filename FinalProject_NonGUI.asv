close all; clear all

%% Load Hazard Curve and Fit a Polynomial in Log-Log Space
load("HazardCurve.txt")

order = '4';
curve = HazardCurve;
interval = [0.2,3];
dSa = 0.01;
[handles] = createPolyFit(order, curve, interval, dSa);

%% Input and Plot Stripe Analysis Results

%GUI Inputs
nf = 6; %Number of Floors
ns = 4; %Number of Stripes
nedp = 3; %Number of EDPs
n = 30; %Number of Groundmotions

%Load Stripes Values from .csv - offset data by one to only get numeric
%data
%It may be better to load a different way, maybe xlsread to give us a cell
%output
%I'm mainly worried about how we know which rows are which EDPs
filenames=["Stripe1_Sa0.10_1col_S.csv","Stripe2_Sa0.35_1col_S.csv",...
    "Stripe3_Sa0.70_1col_S.csv","Stripe4_Sa1.05_1col_S.csv"];
stripes = [0.1,0.35,0.70,1.05];%Not sure how these are input into GUI

for i=1:ns
    disp(filenames(i))
    stripes_edp{i} = csvread(filenames(i),1,1);
end

[handles] = ResponseEstimation(stripes,stripes_edp,handles);

%% Collapse Fragility, MAF, Probability in 50 years
[handles] = CollapseFragility(stripes,n,handles); %Maybe split out functions for MAF and Probability in 50 years

%% Load Fragility and Loss Functions
 
%Load in Fragility Function Information
%Note this only works for fragility and loss function that all have the
%same number of damage states, maybe we could improve?

fragility = readtable('SampleFragilityLossFunctionsS.csv');
%[num,txt,raw] = xlsread('SampleFragilityLossFunctionsS.csv') %takes a long
%time but gives an interesting any maybe useful format

nfr = size(fragility,1); %number of fragility curves
nd = (size(fragility,2)-2)/4; %number of damage states, make so can specify 

categories = table2array(fragility(:,'PG'));
handles.Components = categories;

handles.EDP.IDR = 0:.0001:.1; 
handles.EDP.PFA = 0:.01:3.5;

for i = 1:nfr
    handles.(categories{i}).NumDS = (width(fragility(i, :))-2)/4;
    nDam = handles.(categories{i}).NumDS;
    parse = table2cell(fragility(i, :));
    parameters = zeros(nDam*2,2);
    for j = 2:2*nDam+1
        p1 = parse{2*j-1};
        p2 = parse{2*j};
        parameters(j-1, :) = [p1, p2];
    end
    handles.(categories{i}).DSParams = parameters(1:nDam,:);
    handles.(categories{i}).LossParams = parameters(nDam+1:end,:);
    handles.(categories{i}).EDPtype = parse{2};
    handles.(categories{i}).DM_Fragility = zeros(nDam, length(handles.EDP.(parse{2})));
    EDP = handles.EDP.(parse{2});
    handles.(categories{i}).EDP = EDP;
    for k = 1:nDam
        median = handles.(categories{i}).DSParams(k, 1);
        sigma = handles.(categories{i}).DSParams(k, 2);
        handles.(categories{i}).DM_Fragility(k,:) = normcdf((log(EDP)-log(median))./sigma);
        median = handles.(categories{i}).LossParams(k, 1);
        sigma = handles.(categories{i}).LossParams(k, 2);
    end
    handles.(categories{i}).P_Damage = zeros(nDam+1, length(handles.EDP.(parse{2})));
    handles.(categories{i}).P_Damage(1,:) = 1 - handles.(categories{i}).DM_Fragility(1,:);
    for z = 1:nDam
        if z < nDam
            handles.(categories{i}).P_Damage(z+1,:) = handles.(categories{i}).DM_Fragility(z,:) - ...
                                                    handles.(categories{i}).DM_Fragility(z+1,:);
        else
            handles.(categories{i}).P_Damage(z+1,:) = handles.(categories{i}).DM_Fragility(z,:);
        end
    end
end

% Examples plot of DS
for k = 1:length(handles.Components)
comp = handles.(handles.Components{k});
legendary = strings(1, comp.NumDS);
figure
hold on
    for i=1:comp.NumDS
        plot(comp.EDP, comp.DM_Fragility(i, :))
        legendary(i) = strcat('DS', num2str(i));
    end
    title(strcat(num2str(handles.Components{k}), ' Fragilities'))
    xlabel(strcat('EDP (', comp.EDPtype, ')'))
    ylabel('P[Ds > ds | EDP]')
    legend(legendary)
end

for k = 1:length(handles.Components)
comp = handles.(handles.Components{k});
legendary = strings(1, comp.NumDS);
figure
hold on
    for i=1:comp.NumDS+1
        plot(comp.EDP, comp.P_Damage(i, :))
        if i == 1
            legendary(i) = 'No Damage';
        else
            legendary(i) = strcat('DS', num2str(i-1));
        end
    end
    title(strcat(num2str(handles.Components{k}), ' Probability of being in DS(i)'))
    xlabel(strcat('EDP (', comp.EDPtype, ')'))
    ylabel('P[Ds = ds | EDP]')
    legend(legendary)
    set(gca, ...
  'Box'         , 'off'     , ...
  'TickDir'     , 'out'     , ...
  'TickLength'  , [.02 .02] , ...
  'XMinorTick'  , 'on'      , ...
  'YMinorTick'  , 'on');
    grid on
end


% Probability of Being in Each Damage State Given EDP
% Expected Loss Given Each Damage State
%[handles] = ExpectedLoss(fragility,nfr,nd);
